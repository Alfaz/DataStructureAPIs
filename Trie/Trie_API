/*
Basic Trie implementation, with main function for demonstrative purpose.
Assumptions : 256 character set, -1 is returned as sentinel value when no match is found. So -1 cannot be a valid input here, can be easily solved by using "void* data" in place of "int data", keep any type value and return NULL if not assigned any value.
Compile with -std=c++11
*/

#include<iostream>
class trie{
	private:
		class trieNode{
			public:
				int data;
				trieNode *next[256] = {NULL};
				trieNode(int data){
					this->data = data;
				}
				trieNode(){	//put sentinel -1 if no value is given
					this->data = -1;
				}
		};
		trieNode *root =NULL;
	public:		
		trie(){
			this->root = new trieNode();//root node
		}
		int add(std::string str, int data){
			trieNode *trav = this->root;
			for(std::string::iterator it = str.begin();it != str.end();it++){
				if(trav->next[*it] != NULL){
					trav = trav->next[*it]; //go down one level in trie
				}else{
					trav->next[*it] = new trieNode();	//create new node and go to that node
					trav = trav->next[*it];
				}
			}
			trav->data = data;
		}
		int find(std::string str){
			int ret=-1;
			trieNode *trav = this->root;
			for(std::string::iterator it = str.begin(); it != str.end(); it++){
				if(trav->next[*it] != NULL){
					trav = trav->next[*it]; //go down one level in trie
				}else{
					return ret;
				}
			}
			ret = trav->data;
			return ret;
		}
};

int main(){
	trie *trieSet = new trie();
	std::cout << "Insert abc - 89" <<std::endl;
	std::cout << "Insert abcde - 8" <<std::endl;
	std::cout << "Insert xyz - 99" <<std::endl;
	trieSet->add(std::string("abc"),89);
	trieSet->add(std::string("abcde"),8);
	trieSet->add(std::string("xyz"),99);
	std::cout <<"Find(xyz)   -> "<< trieSet->find(std::string("xyz")) <<std::endl;
	std::cout <<"Find(abc)   -> "<< trieSet->find(std::string("abc")) <<std::endl;
	std::cout <<"Find(abcde) -> "<< trieSet->find(std::string("abcde")) <<std::endl;
	std::cout <<"Find(alfaz) -> "<< trieSet->find(std::string("alfaz")) <<std::endl;
	
return 0;
}
